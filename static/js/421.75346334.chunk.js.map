{"version":3,"file":"static/js/421.75346334.chunk.js","mappings":"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","sources":["components/Button/Button.jsx","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactItem/ContactItem.jsx","components/Notification/Notification.jsx","components/ContactsList/ContactList.jsx","components/SearchInput/SearchInput.jsx","webpack://react-homework-template/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx","pages/Phonebook.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst Button = ({ title, type = 'button', onClick }) => {\n  return (\n    <button className=\"btn\" type={type} onClick={onClick}>\n      {title}\n    </button>\n  );\n};\n\nButton.propTypes = {\n  title: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useState } from 'react';\nimport { Notify } from 'notiflix';\nimport { addContact } from '../../redux/contacts/operations';\nimport Button from '../Button';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(state => state.contacts.items);\n  const dispatch = useDispatch();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      Notify.failure(`${name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact({ name: name, number: number }));\n    setName('');\n    setNumber('');\n  };\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return console.log('Something went wrong');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className=\"formLabel\">\n        <span className=\"labelTitle\">Name:</span>\n        <input\n          className=\"inputTag\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          onChange={handleChange}\n          value={name}\n          required\n        />\n      </label>\n      <label className=\"formLabel\">\n        <span className=\"labelTitle\">Number:</span>\n        <input\n          className=\"inputTag\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          onChange={handleChange}\n          value={number}\n          required\n        />\n      </label>\n\n      <Button title=\"Add contact\" type=\"submit\" />\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ name, number }) => {\n  return (\n    <div>\n      <p className=\"contactName\">{name}:</p>\n      <a className=\"contactNumber\" href={'tel:' + number}>\n        {number}\n      </a>\n    </div>\n  );\n};\n\nContactItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ text }) => <p>{text}</p>;\n\nNotification.propTypes = {\n  text: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContacts, deleteContact } from '../../redux/contacts/operations';\n\nimport ContactItem from './ContactItem';\n\nimport Loader from '../Loader/Loader';\nimport Notification from '../Notification';\nimport Button from '../Button';\n\nconst ContactList = () => {\n  const contacts = useSelector(state => state.contacts.items);\n  const filter = useSelector(state => state.filter);\n  const loading = useSelector(state => state.isLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = () =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n\n  const contactsList = filter ? filteredContacts() : contacts;\n\n  return (\n    <>\n      {loading && Loader}\n      {contactsList.length ? (\n        <ul>\n          {contactsList.map(({ id, name, number }) => (\n            <li className=\"listItem\" key={id}>\n              <ContactItem name={name} number={number} />\n              <Button\n                title=\"Delete\"\n                onClick={() => dispatch(deleteContact(id))}\n              />\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <Notification\n          text={filter ? 'Could not find this name' : 'Contact list is empty'}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ContactList;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { change } from '../../redux/contacts/slice';\n\nconst SearchInput = () => {\n  const filter = useSelector(state => state.filter);\n  const dispatch = useDispatch();\n\n  const handleChange = evt => dispatch(change(evt.target.value));\n\n  return (\n    <div>\n      <p className=\"inputTitle\">Filter by name:</p>\n      <input\n        className=\"inputTag\"\n        type=\"text\"\n        name=\"filter\"\n        title=\"Please enter the name\"\n        onChange={handleChange}\n        value={filter}\n      />\n    </div>\n  );\n};\n\nexport default SearchInput;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Section_container__vEvWA\",\"title\":\"Section_title__SLHvV\"};","import PropTypes from 'prop-types';\nimport css from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <div className={css.container}>\n      <h2 className={css.title}>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.any,\n};\n\nexport default Section;","import ContactForm from '../components/ContactForm';\nimport ContactList from '../components/ContactsList';\nimport SearchInput from '../components/SearchInput';\nimport Section from '../components/Section';\n\nconst Phonebook = () => {\n  return (\n    <>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <SearchInput />\n        <ContactList />\n      </Section>\n    </>\n  );\n};\n\nexport default Phonebook;"],"names":["title","type","onClick","className","useState","name","setName","number","setNumber","contacts","useSelector","state","items","dispatch","useDispatch","handleChange","evt","target","value","console","log","onSubmit","preventDefault","find","contact","toLowerCase","Notify","addContact","pattern","onChange","required","Button","href","text","filter","loading","isLoading","useEffect","fetchContacts","contactsList","includes","Loader","length","map","id","deleteContact","change","children","css"],"sourceRoot":""}